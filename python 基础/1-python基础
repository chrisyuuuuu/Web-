* 环境搭建
* 数据类型
  - 约束
  - 内存（优化）
* 分支、逻辑、循环
  - if
  - while
  - for
* 变量
  - 引用
  - 作用域（全局，局部）
  - 闭包中的变量
  - 线程中的变量ThreadLocal（线程中存的变量独立，互相取不着）
* 函数
  - 减少代码重复，复用代码
  - 分类
    ~ 普通函数
    ~ 匿名函数 lambda 只使用一次
    ~ 类中的函数
      & 类函数 @classmethod 通过类调用，特色：调用类中的变量
      & 静态函数 @staticmethod 特色：调用不了类中的变量
      & 对象函数 可调用类和对象的变量
  - 参数
    ~ 形参 声明
    ~ 实参 实际调用传进来的
    ~ 不定长参数 *args 元组
    ~ 关键字参数 字典
* 面向对象
  - 编程思想
  - 万事万物皆对象 class
  - 三大特性
    ~ 封装
      & 将属性和方法封装到类中
      & 限定访问权限
    ~ 继承
      & 支持多继承
      & MRO 方法调用顺序 method resolve order
        + 菱形继承，a,bc继承a,d继承bc,调用谁的，不同python版本调用顺序不同
    ~ 多态
      & 一种事物的多种形态
  - 优势
    & 简化编程模型
* 数据结构
  - list
    队列，栈，底层数组
  - tuple
    和list一致，不可修改
    一级不可改，多级不可改
  - set
    hash表，输入多少，输出多长固定
  - dict
    key-value 映射
* 网络编程
  - socket
    长连接使用，手动维护
  - tcp
    三次握手，四次挥手
  - udp
    广播协议

* 特殊函数
  - 高阶函数
  - 闭包函数
  - 装饰器

* 四大器
  - 生成器 核心 定义生成规则，不占用内存空间
  - 迭代器  迭代可迭代元素
  - 装饰器
  - 描述器

* 序列化 字符串变字典互转
  - 字典存文本
    json
    pickle

* 编程思想
  - OOP(面向对象)
    面向接口（web）,只关注结果
  - POP(面向过程)
  
* 解决死锁（互相等待）
  - 对加锁模块try:except 在finally释放锁  

* 面试知识点回答：
  - 知识点是什么
  - 核心思想（重要组成）
  - 优势(),劣势
  - 为什么用，什么时候用
  
* 高效提出问题，并解决问题
  - 提问的时候，带着自己的见解和已经调试的步骤，以及错误信息
  - 开源社区